<!-- DO NOT EDIT README.md (It will be overridden by README.hbs) -->


# internal-data

<!-- START doctoc -->
<!-- END doctoc -->

# Description

Private properties implementation using WeakMap as described on [MDN - Private Properties](https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Contributor_s_Guide/Private_Properties).

# Synopsis

## TypeScript with Object Interface
```js
import InternalData from 'internal-data';

const internalData: InternalData<MyClass, Internal> = new InternalData();

type Internal = { password: string };

class MyClass {
  name: string;

  constructor(name: string, password: string) {
    const internal = internalData.get(this);
    this.name = name;
    internal.password = password;
  }

  checkPassword(password: string): boolean {
    const internal = internalData.get(this);
    return internal.password === password;
  }
}

const object = new MyClass('George', '1234');

const name     = object.name;                  // -> George
const password = object.password;              // -> TYPESCRIPT ERROR
const isValid  = object.checkPassword('1234'); // -> true
```

## TypeScript with Function Interface
```js
import InternalData from 'internal-data';

const getInternal = InternalData.getFunction<MyClass, Internal>();

type Internal = { password: string };

class MyClass {
  name: string;

  constructor(name: string, password: string) {
    const internal = getInternal(this);
    this.name = name;
    internal.password = password;
  }

  checkPassword(password: string): boolean {
    const internal = getInternal(this);
    return internal.password === password;
  }
}

const object = new MyClass('George', '1234');

const name     = object.name;                  // -> George
const password = object.password;              // -> TYPESCRIPT ERROR
const isValid  = object.checkPassword('1234'); // -> true

console.log(object.checkPassword('1234'));
```

## JavaScript with Object Interface

```js
import InternalData from 'internal-data';

const internalData = new InternalData(); // eslint-disable-line no-use-before-define

class MyClass {
  constructor(name, password) {
    const internal = internalData.get(this);
    this.name = name;
    internal.password = password;
  }

  checkPassword(password) {
    const internal = internalData.get(this);
    return internal.password === password;
  }
}

const object = new MyClass('George', '1234');

const name     = object.name;                  // -> George
const password = object.password;              // -> undefined
const isValid  = object.checkPassword('1234'); // -> true
```

# Details

To access private properties of the object use `getInternal(this)` method. It returns an object to store private attributes
of given object (In this case it is It is `this`)

# API
{{>main~}}
